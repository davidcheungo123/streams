{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\React_courses_1\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }\n      }, \"Loading\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, title), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["C:/Users/user/React_courses_1/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","componentDidUpdate","player","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAuB,aAAvB;AACA,SAASC,WAAT,QAA2B,eAA3B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAIA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAErCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKN,KAAL,CAAWL,WAAX,CAAuBS,EAAvB;AACA,SAAKG,WAAL;AAEH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKD,WAAL;AACH;;AAEDA,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKE,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWU,MAA/B,EAAuC;AACnC;AACH;;AAED,UAAM;AAAEN,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AAEA,SAAKG,MAAL,GAAcb,GAAG,CAACe,YAAJ,CAAiB;AAC3BC,MAAAA,IAAI,EAAE,KADqB;AAE3BC,MAAAA,GAAG,EAAG,8BAA6BT,EAAG;AAFX,KAAjB,CAAd;AAIA,SAAKK,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,SAAKN,MAAL,CAAYO,IAAZ;AACH;;AAGDC,EAAAA,MAAM,GAAG;AAED,QAAI,CAAC,KAAKjB,KAAL,CAAWU,MAAhB,EAAwB;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACH;;AAED,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwB,KAAKnB,KAAL,CAAWU,MAAzC;AAEA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAE,KAAKT,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEmB,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHJ,CADJ;AASH;;AApDgC;;AAuDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AACHb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AADL,GAAP;AAGH,CAJD;;AAMA,eAAeV,OAAO,CAAC2B,eAAD,EAAkB;AAAE1B,EAAAA;AAAF,CAAlB,CAAP,CAAyCE,UAAzC,CAAf","sourcesContent":["\r\nimport React from 'react';\r\nimport {connect}  from 'react-redux';\r\nimport { fetchStream} from '../../actions';\r\nimport flv from 'flv.js';\r\n\r\n\r\n\r\nclass StreamShow extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.videoRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params\r\n        this.props.fetchStream(id);\r\n        this.buildPlayer();\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.buildPlayer();\r\n    }\r\n\r\n    buildPlayer() {\r\n        if (this.player || !this.props.stream) {\r\n            return;\r\n        } \r\n\r\n        const { id } = this.props.match.params\r\n\r\n        this.player = flv.createPlayer({\r\n            type: 'flv',\r\n            url: `http://localhost:8000/live/${id}.flv`\r\n        });\r\n        this.player.attachMediaElement(this.videoRef.current);\r\n        this.player.load();\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n            if (!this.props.stream) {\r\n                return <div>Loading</div>;\r\n            }\r\n\r\n            const { title, description} = this.props.stream;\r\n\r\n            return (\r\n                <div>\r\n                    <video ref={this.videoRef} style={{ width: '100%' }} controls />\r\n                    <h1>{title}</h1>\r\n                    <h5>{description}</h5>\r\n                </div>\r\n            );\r\n\r\n        \r\n        }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        stream: state.streams[ownProps.match.params.id]\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStream})(StreamShow);"]},"metadata":{},"sourceType":"module"}